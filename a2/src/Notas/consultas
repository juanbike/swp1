como mejorar el rendimiento de las consultas utilizando índices, dame un ejemplo
--------------------------------------------------------------------------------
        Utilizar índices adecuadamente puede mejorar significativamente el rendimiento de las consultas en una base de datos PostgreSQL. Un índice es una estructura de datos que agiliza la búsqueda de registros en una tabla, permitiendo que la base de datos acceda más rápidamente a los datos. Aquí tienes un ejemplo de cómo mejorar el rendimiento de las consultas utilizando índices en una aplicación NestJS con TypeORM:

        Supongamos que tienes una entidad `User` y quieres mejorar el rendimiento de las consultas que buscan usuarios por su dirección de correo electrónico. Puedes crear un índice en la columna de correo electrónico para acelerar estas consultas.

        1. **Definir el índice en la entidad `User`:**

        ```typescript
        import { Entity, PrimaryGeneratedColumn, Column, Index } from 'typeorm';

        @Entity()
        @Index('idx_user_email', ['email']) // Definir un índice en la columna 'email'
        export class User {
        @PrimaryGeneratedColumn()
        id: number;

        @Column()
        firstName: string;

        @Column()
        lastName: string;

        @Column({ unique: true }) // Asegurarse de que el correo electrónico sea único
        email: string;

        // Otras propiedades y relaciones pueden ir aquí
        }
        ```

        2. **Aplicar la migración en la base de datos:**
        
        Después de definir el índice en tu entidad, asegúrate de aplicar las migraciones para que los cambios se reflejen en la base de datos.

        ```bash
        typeorm migration:generate -n AddIndexToUserEmail
        typeorm migration:run
        ```

        3. **Realizar consultas optimizadas:**

        Con el índice creado en la columna `email`, las consultas que buscan usuarios por correo electrónico serán más eficientes. Por ejemplo:

        ```typescript
        import { Injectable } from '@nestjs/common';
        import { InjectRepository } from '@nestjs/typeorm';
        import { Repository } from 'typeorm';
        import { User } from './user.entity';

        @Injectable()
        export class UserService {
        constructor(
            @InjectRepository(User)
            private readonly userRepository: Repository<User>,
        ) {}

        async findByEmail(email: string): Promise<User | undefined> {
            return this.userRepository.findOne({ where: { email } });
        }
        }
        ```

        Con la optimización del índice, la consulta `findByEmail()` será más rápida y eficiente, ya que la base de datos utilizará el índice en la columna de correo electrónico para encontrar el usuario correspondiente de manera más rápida.

        Recuerda que es importante evaluar cuidadosamente qué columnas necesitan índices en función de las consultas más frecuentes en tu aplicación, ya que crear índices en exceso puede tener un impacto negativo en el rendimiento de las operaciones de escritura y en el espacio de almacenamiento.